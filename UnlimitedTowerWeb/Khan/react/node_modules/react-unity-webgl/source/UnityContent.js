"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UnityVersion_1 = require("./enums/UnityVersion");
require("./Types");
var UnityContent = /** @class */ (function () {
    /**
     * Creates a new Unity content object. This object can be used
     * @param {string} buildJsonPath the relative path to the build json file generated by Unity.
     * @param {string} unityLoaderJsPath the relative path to the unity loader javascript file.
     * @param {IUnityConfig} unityConfig the Unity configuration that will be used to start the player.
     */
    function UnityContent(buildJsonPath, unityLoaderJsPath, unityConfig) {
        var _unityConfig = unityConfig || {};
        this.buildJsonPath = buildJsonPath;
        this.unityLoaderJsPath = unityLoaderJsPath;
        this.uniqueID = ++UnityContent.uniqueID;
        this.unityEvents = [];
        this.unityConfig = {
            modules: _unityConfig.modules || {},
            unityVersion: _unityConfig.unityVersion || UnityVersion_1.UnityVersion.UNITY_2018,
            adjustOnWindowResize: _unityConfig.adjustOnWindowResize,
            id: _unityConfig.id || "nill"
        };
    }
    /**
     * Binds a unity component to this content.
     * @param unityComponentInstance the unity component that will be binded to this content.
     * @public
     */
    UnityContent.prototype.setComponentInstance = function (unityComponentInstance) {
        this.unityComponent = unityComponentInstance;
    };
    /**
     * Binds a unity player to this content.
     * @param unityPlayerInstance the unity component that will be binded to this content.
     * @public
     */
    UnityContent.prototype.setUnityInstance = function (unityInstance) {
        this.unityInstance = unityInstance;
    };
    /**
     * Sets the unity players fullscreen mode.
     * @param {boolean} fullscreen
     * @public
     */
    UnityContent.prototype.setFullscreen = function (fullscreen) {
        if (this.unityInstance != null) {
            this.unityInstance.SetFullscreen(fullscreen === true ? 1 : 0);
        }
    };
    /**
     * Sends an event to the Unity player that will trigger a function.
     * @param {string} gameObjectName the name of the game object in your Unity scene.
     * @param {string} methodName the name of the public method on the game object.
     * @param {any} parameter an optional parameter to pass along to the method.
     * @public
     */
    UnityContent.prototype.send = function (gameObjectName, methodName, parameter) {
        if (this.unityInstance != null) {
            if (typeof parameter === "undefined") {
                this.unityInstance.SendMessage(gameObjectName, methodName);
            }
            else {
                this.unityInstance.SendMessage(gameObjectName, methodName, parameter);
            }
        }
    };
    /**
     * Registers an event listener for the Unity player. These can be
     * system events like when the player is initialized or loader and
     * your custom events from Unity.
     * @param {string} eventName the event name
     * @param {Function} eventCallback the event function
     * @returns {any} The Function
     * @public
     */
    UnityContent.prototype.on = function (eventName, eventCallback) {
        this.unityEvents.push({
            eventName: eventName,
            eventCallback: eventCallback
        });
        if (typeof window.ReactUnityWebGL === "undefined")
            window.ReactUnityWebGL = {};
        window.ReactUnityWebGL[eventName] = function (parameter) {
            return eventCallback(parameter);
        };
    };
    /**
     * Triggers an event that has been registered by the on
     * function.
     * @param {string} eventName the event name
     * @param {Function} eventValue the event value
     * @public
     */
    UnityContent.prototype.triggerUnityEvent = function (eventName, eventValue) {
        for (var _i = 0; _i < this.unityEvents.length; _i++)
            if (this.unityEvents[_i].eventName === eventName)
                this.unityEvents[_i].eventCallback(eventValue);
    };
    /**
     * the statis unique ID keeps track of the
     * unique ID's made by other instances.
     * @type {number}
     * @static
     * @public
     */
    UnityContent.uniqueID = 0;
    return UnityContent;
}());
exports.default = UnityContent;
//# sourceMappingURL=UnityContent.js.map
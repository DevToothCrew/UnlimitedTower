{"ast":null,"code":"import _classCallCheck from \"/home/ydw/react-test-v4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/ydw/react-test-v4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ydw/react-test-v4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/ydw/react-test-v4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/ydw/react-test-v4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ydw/react-test-v4/src/App.js\";\nimport React from 'react';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport './App.css';\nimport Unity, { UnityContent } from \"react-unity-webgl\"; // 스캐터 사용하기 위해 객체 생성 및 옵션 설정\n\nScatterJS.plugins(new ScatterEOS());\nvar network = {\n  blockchain: 'eos',\n  protocol: 'https',\n  host: 'jungle2.cryptolions.io',\n  port: 443,\n  chainId: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473' // 유니티 객체를 전역으로 설정\n\n};\nvar unityContent = new UnityContent(\"http://192.168.219.104:3000/Build/TestBuild.json\", \"http://192.168.219.104:3000/Build/UnityLoader.js\", {\n  adjustOnWindowResize: true\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); // 유니티에서 실행 된 함수를 unityContent 객체로 받아서 실행\n\n    unityContent.on(\"SignUp\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          eos.transaction({\n            actions: [{\n              account: 'canieparty22',\n              name: 'signup',\n              authorization: [{\n                actor: account.name,\n                permission: account.authority\n              }],\n              data: {\n                _user: account.name\n              }\n            }]\n          });\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/signup';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result.body);\n            unityContent.send(\"PacketManager\", \"Response_Login\", data);\n          }).catch(function (error) {\n            console.error(error);\n          });\n        });\n      });\n    });\n    unityContent.on(\"Gacha\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          var transactionOptions = {\n            authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n          };\n          eos.transfer(account.name, 'canieparty22', '1.0000 EOS', 'gacha', transactionOptions).then(function (trx) {\n            console.log(\"Transaction ID: \".concat(trx.transaction_id));\n          }).catch(function (error) {\n            console.error(error);\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/gacha';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            unityContent.send(\"PacketManager\", \"Response_Gacha\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"Login\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/login';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result.body);\n            unityContent.send(\"PacketManager\", \"Response_Login\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"SetFormation\", function (data) {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          var value = JSON.parse(data);\n          eos.transaction({\n            actions: [{\n              account: 'canieparty22',\n              name: 'setparty',\n              authorization: [{\n                actor: account.name,\n                permission: account.authority\n              }],\n              data: {\n                _user: account.name,\n                _party_number: value.partyNum,\n                _party_list: value.partyList\n              }\n            }]\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/setFormation';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name,\n            index: value.partyNum,\n            party: value.partyList\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(data);\n            unityContent.send(\"PacketManager\", \"Response_GetParty\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetServant\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/getServant';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"PacketManager\", \"Response_GetAllServant\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetItem\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/getItem';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"Packet\", \"TestReceive\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetMonster\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = 'https://dcugl.com:5000/getMonster';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"PacketManager\", \"Response_GetAllMonster\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"Logout\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        scatter.forgetIdentity();\n        unityContent.send(\"PacketManager\", \"Response_GetAllMonster\", false);\n      });\n    });\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(Unity, {\n        unityContent: unityContent,\n        className: \"unityapp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/ydw/react-test-v4/src/App.js"],"names":["React","ScatterJS","ScatterEOS","Eos","Unity","UnityContent","plugins","network","blockchain","protocol","host","port","chainId","unityContent","adjustOnWindowResize","App","props","on","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","eos","transaction","actions","name","authorization","actor","permission","authority","data","_user","request","require","url","post","set","send","user","result","JSON","stringify","body","console","log","catch","error","transactionOptions","transfer","trx","transaction_id","value","parse","_party_number","partyNum","_party_list","partyList","index","party","forgetIdentity","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport './App.css';\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n\n// 스캐터 사용하기 위해 객체 생성 및 옵션 설정\nScatterJS.plugins( new ScatterEOS() );\nconst network = {\n    blockchain:'eos',\n    protocol:'https',\n    host:'jungle2.cryptolions.io',\n    port:443,\n    chainId:'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'\n}\n\n// 유니티 객체를 전역으로 설정\nlet unityContent = new UnityContent(\n    \"http://192.168.219.104:3000/Build/TestBuild.json\",\n    \"http://192.168.219.104:3000/Build/UnityLoader.js\",\n    {\n        adjustOnWindowResize: true\n    }\n  ); \n  \nclass App extends React.Component {\n    componentDidMount(){\n    \n    }\n    constructor(props){\n        super(props);\n        // 유니티에서 실행 된 함수를 unityContent 객체로 받아서 실행\n        unityContent.on(\"SignUp\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n\n                    eos.transaction({\n                        actions:[\n                            {\n                                account : 'canieparty22',\n                                name : 'signup',\n                                authorization:[{\n                                    actor : account.name,\n                                    permission : account.authority\n                                }],\n                                data : {\n                                    _user : account.name\n                                }\n                            }                  \n                        ]\n                    });  \n\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/signup';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result.body);\n                        unityContent.send(\"PacketManager\", \"Response_Login\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                });\n            });\n        });\n\n        unityContent.on(\"Gacha\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                    \n                    const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n\n                    eos.transfer(account.name, 'canieparty22', '1.0000 EOS', 'gacha', transactionOptions).then(trx => {\n                        console.log(`Transaction ID: ${trx.transaction_id}`);\n                    }).catch(error => {\n                        console.error(error);\n                    });\n\n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/gacha';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                            const data = JSON.stringify(result.body);\n                            unityContent.send(\"PacketManager\", \"Response_Gacha\", data);\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"Login\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/login';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result.body);\n                        unityContent.send(\"PacketManager\", \"Response_Login\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"SetFormation\", data => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                  \n                    const value = JSON.parse(data);\n                    eos.transaction({\n                        actions:[\n                            {\n                                account : 'canieparty22',\n                                name : 'setparty',\n                                authorization:[{\n                                    actor : account.name,\n                                    permission : account.authority\n                                }],\n                                data : {\n                                    _user : account.name,\n                                    _party_number : value.partyNum,\n                                    _party_list : value.partyList\n                                }\n                            }\n                        ]\n                    });  \n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/setFormation';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({\n                            user : account.name,\n                            index: value.partyNum,\n                            party: value.partyList\n                        })\n                        .then(result=>{\n                            const data = JSON.stringify(result.body);\n                            console.log(data);\n                            unityContent.send(\"PacketManager\", \"Response_GetParty\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n\n\n        });\n        \n\n\n        unityContent.on(\"GetServant\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/getServant';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"PacketManager\", \"Response_GetAllServant\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"GetItem\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/getItem';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"Packet\", \"TestReceive\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"GetMonster\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url='https://dcugl.com:5000/getMonster';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"PacketManager\", \"Response_GetAllMonster\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"Logout\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n               scatter.forgetIdentity();\n               unityContent.send(\"PacketManager\", \"Response_GetAllMonster\", false);\n            });\n        });\n\n        \n    \n\n    }\n    render() {\n        return (\n            <div>\n            <Unity unityContent={unityContent} className = \"unityapp\"   />\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}
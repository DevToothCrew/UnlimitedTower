using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Devcat
{
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // EnumHashSet<T>
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // author: netics@nexon.co.kr
    public class EnumHashSet<T> :
        IEnumerable<T>,
        ICollection<T>,
        IEnumerable
        where T : struct
    {
        //================================================================================================================================
        // 속성
        //================================================================================================================================
        public readonly HashSet<int> Raw;

        //================================================================================================================================
        // 생성
        //================================================================================================================================
        public EnumHashSet()
        {
            Raw = new HashSet<int>();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public EnumHashSet(IEnumerable<T> collection)
        {
            Raw = new HashSet<int>();
            foreach( var e in collection )
            {
                Add(e);
            }
        }

        //================================================================================================================================
        // HashSet 구현
        //================================================================================================================================
        public int Count
        {
            get { return Raw.Count; }
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public IEqualityComparer<T> Comparer
        {
            get { throw new NotImplementedException(); }
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void CopyTo(T[] array)
        {
            throw new NotImplementedException();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void CopyTo(T[] array, int index)
        {
            throw new NotImplementedException();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void CopyTo(T[] array, int index, int count)
        {
            throw new NotImplementedException();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Add(T key)
        {
            return Raw.Add(ToInternalKey(key));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void Clear()
        {
            Raw.Clear();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Contains(T key)
        {
            return Raw.Contains(ToInternalKey(key));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Remove(T key)
        {
            return Raw.Remove(ToInternalKey(key));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public int RemoveWhere(Predicate<T> predicate)
        {
            return Raw.RemoveWhere(e => predicate(ToExternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void TrimExcess()
        {
            Raw.TrimExcess();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void IntersectWith(EnumHashSet<T> other)
        {
            Raw.IntersectWith(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void IntersectWith(IEnumerable<T> other)
        {
            Raw.IntersectWith(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void ExceptWith(EnumHashSet<T> other)
        {
            Raw.ExceptWith(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void ExceptWith(IEnumerable<T> other)
        {
            Raw.ExceptWith(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Overlaps(EnumHashSet<T> other)
        {
            return Raw.Overlaps(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Overlaps(IEnumerable<T> other)
        {
            return Raw.Overlaps(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool SetEquals(EnumHashSet<T> other)
        {
            return Raw.SetEquals(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool SetEquals(IEnumerable<T> other)
        {
            return Raw.SetEquals(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void SymmetricExceptWith(EnumHashSet<T> other)
        {
            Raw.SymmetricExceptWith(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void SymmetricExceptWith(IEnumerable<T> other)
        {
            Raw.SymmetricExceptWith(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void UnionWith(EnumHashSet<T> other)
        {
            Raw.UnionWith(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public void UnionWith(IEnumerable<T> other)
        {
            Raw.UnionWith(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsSubsetOf(EnumHashSet<T> other)
        {
            return Raw.IsSubsetOf(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsSubsetOf(IEnumerable<T> other)
        {
            return Raw.IsSubsetOf(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsProperSubsetOf(EnumHashSet<T>  other)
        {
            return Raw.IsProperSubsetOf(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsProperSubsetOf(IEnumerable<T> other)
        {
            return Raw.IsProperSubsetOf(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsSupersetOf(EnumHashSet<T> other)
        {
            return Raw.IsSupersetOf(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsSupersetOf(IEnumerable<T> other)
        {
            return Raw.IsSupersetOf(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsProperSupersetOf(EnumHashSet<T> other)
        {
            return Raw.IsProperSupersetOf(other.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool IsProperSupersetOf(IEnumerable<T> other)
        {
            return Raw.IsProperSupersetOf(other.Select(e => ToInternalKey(e)));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public Enumerator GetEnumerator()
        {
            return new Enumerator(Raw.GetEnumerator());
        }

        //================================================================================================================================
        // ICollection<T> 구현
        //================================================================================================================================
        bool ICollection<T>.IsReadOnly
        {
            get { return RawTypedCollection.IsReadOnly; }
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        void ICollection<T>.Add(T item)
        {
            RawTypedCollection.Add(ToInternalKey(item));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        bool ICollection<T>.Contains(T item)
        {
            return RawTypedCollection.Contains(ToInternalKey(item));
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        void ICollection<T>.CopyTo(T[] array, int arrayIndex)
        {
            throw new NotImplementedException();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        bool ICollection<T>.Remove(T item)
        {
            return RawTypedCollection.Remove(ToInternalKey(item));
        }

        //================================================================================================================================
        // IEnumerable<T> 구현
        //================================================================================================================================
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return new Enumerator(Raw.GetEnumerator());
        }

        //================================================================================================================================
        // IEnumerable 구현
        //================================================================================================================================
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new Enumerator(Raw.GetEnumerator());
        }

        //================================================================================================================================
        // object 구현
        //================================================================================================================================
        public override bool Equals(object rhs)
        {
            if( rhs == null ) { return false; }
            if( rhs.GetType() != GetType() ) { return false; }
            return Equals((EnumHashSet<T>)rhs);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public bool Equals(EnumHashSet<T> rhs)
        {
            return Raw.Equals(rhs.Raw);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public override int GetHashCode()
        {
            return Raw.GetHashCode();
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        public override string ToString()
        {
            //HashSet<>.ToString()도 아래처럼 구현되어 있다.
            return GetType().ToString();
        }

        //================================================================================================================================
        // Enumerator 타입
        //================================================================================================================================
        public struct Enumerator : IEnumerator, IDisposable, IEnumerator<T>
        {
            HashSet<int>.Enumerator enumerator;

            internal Enumerator(HashSet<int>.Enumerator enumerator_)
            {
                enumerator = enumerator_;
            }

            //================================================================================================================================
            // HashSet.Enumerator 구현
            //================================================================================================================================
            public T Current
            {
                get { return ToExternalKey(enumerator.Current); }
            }
            //--------------------------------------------------------------------------------------------------------------------------------
            public void Dispose()
            {
                enumerator.Dispose();
            }
            //--------------------------------------------------------------------------------------------------------------------------------
            public bool MoveNext()
            {
                return enumerator.MoveNext();
            }

            //================================================================================================================================
            // IEnumerator 구현
            //================================================================================================================================
            object IEnumerator.Current
            {
                get { return ToExternalKey(enumerator.Current); }
            }
            //--------------------------------------------------------------------------------------------------------------------------------
            void IEnumerator.Reset()
            {
                ((IEnumerator)enumerator).Reset();
            }
        }

        //================================================================================================================================
        // 전용
        //================================================================================================================================
        static int ToInternalKey(T key)
        {
            return BitConvert.Enum32ToInt(key);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        static T ToExternalKey(int key)
        {
            return BitConvert.IntToEnum32<T>(key);
        }
        //--------------------------------------------------------------------------------------------------------------------------------
        ICollection<int> RawTypedCollection
        {
            get { return Raw; }
        }
    }
}